import datetime
import pytz

from django.db import models

from . import oidcendpoint_app


OIDC_RESPONSE_TYPES = oidcendpoint_app.srv_config.conf['op']\
                        ['server_info']['endpoint']['authorization']\
                        ['kwargs']['response_types_supported']

OIDC_TOKEN_AUTHN_METHODS = oidcendpoint_app.srv_config.conf['op']\
                            ['server_info']['endpoint']['token']\
                            ['kwargs']['client_authn_method']

OIDC_GRANT_TYPES = oidcendpoint_app.srv_config.conf['op']\
                    ['server_info']['capabilities']['grant_types_supported']

TIMESTAMP_FIELDS = ['client_id_issued_at', 'client_secret_expires_at']


class TimeStampedModel(models.Model):
    """
    An abstract base class model that provides self-updating
    ``created`` and ``modified`` fields.
    """
    created = models.DateTimeField(auto_now_add=True, editable=False)
    modified = models.DateTimeField(auto_now=True, editable=False)

    class Meta:
        abstract = True


class OidcRelyingParty(TimeStampedModel):
    """
    See: https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata

    endpoint.endpoint_context.cdb['gE6Yw35JFTl1']
    should return this asset

    # Client db
    {'gE6Yw35JFTl1':
        {'client_id': 'gE6Yw35JFTl1',
         'client_salt': '6flfsj0Z',
         'registration_access_token': 'z3PCMmC1HZ1QmXeXGOQMJpWQNQynM4xY',
         'registration_client_uri': 'https://127.0.0.1:8000/registration_api?client_id=gE6Yw35JFTl1',
         'client_id_issued_at': 1575460012,
         'client_secret': '19cc69b70d0108f630e52f72f7a3bd37ba4e11678ad1a7434e9818e1',
         'client_secret_expires_at': 1575892012,
         'application_type': 'web',
         'response_types': ['code'],
         'contacts': ['ops@example.com'],
         'token_endpoint_auth_method': 'client_secret_basic',
         'jwks_uri': 'https://127.0.0.1:8099/static/jwks.json',
         'post_logout_redirect_uris': [('https://127.0.0.1:8099', None)],
         'grant_types': ['authorization_code'],
         'redirect_uris': [('https://127.0.0.1:8099/authz_cb/django_oidc_op', {})]
         }
    }


    unique if available (check on save):
        client_secret should be
        registration_access_token unique if available

    issued -> number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time
    client_salt -> must be autogenerated on save
    """
    client_id = models.CharField(max_length=255,
                                 blank=False, null=False, unique=True)
    client_salt = models.CharField(max_length=255, blank=True, null=True)
    registration_access_token = models.CharField(max_length=255, blank=True,
                                                 null=True)
    registration_client_uri = models.URLField(max_length=255,
                                              blank=True, null=True)
    client_id_issued_at = models.DateTimeField(blank=True, null=True)
    client_secret = models.CharField(max_length=255,
                                     blank=True, null=True,
                                     help_text=('It is not needed for Clients '
                                                'selecting a token_endpoint_auth_method '
                                                'of private_key_jwt'))
    client_secret_expires_at = models.DateTimeField(
                                help_text=('REQUIRED if client_secret is issued'))
    application_type = models.CharField(max_length=255, blank=True,
                                        null=True)
    response_types = models.CharField(choices=[(i, i) for i in OIDC_RESPONSE_TYPES],
                                      max_length=33)
    contacts = models.CharField(max_length=254,
                                blank=True, null=True,)
    token_endpoint_auth_method = models.CharField(choices=[(i, i)
                                                           for i in
                                                           OIDC_TOKEN_AUTHN_METHODS],
                                                  max_length=33)
    auth_method = models.CharField(choices=[(i, i)
                                            for i in
                                            OIDC_TOKEN_AUTHN_METHODS],
                                   max_length=33)
    jwks_uri = models.URLField(max_length=255, blank=True, null=True)
    post_logout_redirect_uris = models.CharField(max_length=254,
                                                 blank=True, null=True)
    grant_types = models.CharField(choices=[(i,i) for i in OIDC_GRANT_TYPES],
                                   max_length=60)
    redirect_uris = models.CharField(max_length=254,
                                     blank=True, null=True)
    is_active = models.BooleanField(('active'), default=True)


    def __getitem__(self, key):
        """self[key]    Accessing an item using an index"""
        value = getattr(self, key)
        if key in TIMESTAMP_FIELDS:
            value = self.get_timestamp(key)
        return value

    def __setitem__(self, key, val):
        """ self[key] = val Assigning to an item using an index"""
        if key in TIMESTAMP_FIELDS:
            value = self.set_timestamp(key, val)
        else:
            setattr(self, key, val)
            self.save()

    def get_timestamp(self, key):
        value = getattr(self, key)
        return datetime.datetime.timestamp(value)

    def set_timestamp(self, key, value):
        ts = pytz.utc.localize(datetime.datetime.fromtimestamp(value))
        setattr(self, key, ts)
        self.save()

    class Meta:
        verbose_name = ('Relying Party')
        verbose_name_plural = ('Relying Parties')

    def __str__(self):
        return '{}, [{}]'.format(self.client_id, self.is_active)
