logging:
  version: 1
  disable_existing_loggers: False
  root:
    handlers:
      - default
      - console
    level: DEBUG
  loggers:
    idp:
      level: DEBUG
  handlers:
    default:
      class: logging.FileHandler
      filename: 'debug.log'
      formatter: default
    console:
      class: logging.StreamHandler
      stream: 'ext://sys.stdout'
      formatter: default
  formatters:
    default:
      format: '%(asctime)s %(name)s %(levelname)s %(message)s'

port: 8099
base_url: "https://127.0.0.1:{port}"

# If BASE is https these has to be specified
webserver:
  port: '{port}'
  server_cert: "certs/cert.pem"
  server_key: "certs/key.pem"
  domain: '{domain}'

# This is just for testing an local usage. In all other cases it MUST be True
http_params:
  verify_ssl: False

key_defs: &keydef
  -
    "type": "RSA"
    "key": ''
    "use": ["sig"]
  -
    "type": "EC"
    "crv": "P-256"
    "use": ["sig"]

html_home: 'html'
secret_key: 'secret_key'
session_cookie_name: 'rp_session'
preferred_url_scheme: 'https'

oidc_keys:
    'private_path': './private/jwks.json'
    'key_defs': *keydef
    'public_path': './static/jwks.json'
    # this will create the jwks files if they absent
    'read_only': False

services: &services
  discovery:
    class: oidcservice.oidc.provider_info_discovery.ProviderInfoDiscovery
    kwargs: {}
  registration:
    class: oidcservice.oidc.registration.Registration
    kwargs: {}
  authorization:
    class: oidcservice.oidc.authorization.Authorization
    kwargs: {}
  accesstoken:
    class: oidcservice.oidc.access_token.AccessToken
    kwargs: {}
  refresh_accesstoken:
    class: oidcservice.oidc.refresh_access_token.RefreshAccessToken
    kwargs: {}
  userinfo:
    class: oidcservice.oidc.userinfo.UserInfo
    kwargs: {}
  end_session:
    class: oidcservice.oidc.end_session.EndSession
    kwargs: {}

# information used when registering the client, this may be the same for all OPs
client_preferences: &prefs
    application_name: rphandler
    application_type: web
    contacts: [ops@example.com]
    response_types: [code]
    scope: [openid, profile, email, address, phone]
    token_endpoint_auth_method: [client_secret_basic, client_secret_post]


clients:
  # The ones that support webfinger, OP discovery and client registration
  # This is the default, any client that is not listed here is expected to
  # support dynamic discovery and registration.
  "":
    client_preferences: *prefs
    redirect_uris: None
    services: *services

  django_oidc_op:
    client_preferences: *prefs

    # if you create a client through ADMIN UI ...
    # client_id: z9wUOttmF3qc
    # client_secret: 01a7c8f6b9aa16985c3f57b50082cc3211c58acf639caa590f6ea5fd
    # token_endpoint_auth_method: client_secret_basic

    issuer: https://127.0.0.1:8000/
    jwks_uri: https://127.0.0.1:8099/static/jwks.json
    redirect_uris: ['https://127.0.0.1:8099/authz_cb/django_oidc_op']
    services: *services
    add_ons:
      pkce:
        function: oidcservice.oidc.add_on.pkce.add_pkce_support
        kwargs:
          code_challenge_length: 64
          code_challenge_method: S256

# Whether an attempt to fetch the userinfo should be made
user_info: true
