PORT: 8099
BASEURL: "https://127.0.0.1:8099"

# If BASE is https these has to be specified
SERVER_CERT: "certs/cert.pem"
SERVER_KEY: "certs/key.pem"
CA_BUNDLE: ''

# This is just for testing an local usage. In all other cases it MUST be True
VERIFY_SSL: false

KEYDEFS: &keydef
  -
    "type": "RSA"
    "key": ''
    "use": ["sig"]
  -
    "type": "EC"
    "crv": "P-256"
    "use": ["sig"]

HTML_HOME: 'html'
SECRET_KEY: 'secret_key'
SESSION_COOKIE_NAME: 'rp_session'
PREFERRED_URL_SCHEME: 'https'

OIDC_KEYS:
    'private_path': './private/jwks.json'
    'key_defs': *keydef
    'public_path': './static/jwks.json'
    # this will create the jwks files if they absent
    'read_only': False

# PUBLIC_JWKS_PATH: 'https://127.0.0.1:8090/static/jwks.json'
# PRIVATE_JWKS_PATH: './private/jwks.json'

client_preferences: &id001
    application_name: rphandler
    application_type: web
    contacts: [ops@example.com]
    response_types: [code]
    scope: [openid, profile, email, address, phone]
    token_endpoint_auth_method: [client_secret_basic, client_secret_post]

services: &id002
  discovery:
    class: oidcservice.oidc.provider_info_discovery.ProviderInfoDiscovery
    kwargs: {}
  registration:
    class: oidcservice.oidc.registration.Registration
    kwargs: {}
  authorization:
    class: oidcservice.oidc.authorization.Authorization
    kwargs: {}
  accesstoken:
    class: oidcservice.oidc.access_token.AccessToken
    kwargs: {}
  refresh_accesstoken:
    class: oidcservice.oidc.refresh_access_token.RefreshAccessToken
    kwargs: {}
  userinfo:
    class: oidcservice.oidc.userinfo.UserInfo
    kwargs: {}
  end_session:
    class: oidcservice.oidc.end_session.EndSession
    kwargs: {}


CLIENTS:
  djop:
    client_preferences: *id001
    issuer: https://127.0.0.1:8000/
    jwks_uri: https://127.0.0.1:8099/static/jwks.json
    redirect_uris: ['https://127.0.0.1:8099/authz_cb/djop']
    services: *id002

# Whether an attempt to fetch the userinfo should be made
USERINFO: true
